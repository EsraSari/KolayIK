// <auto-generated />
using System;
using KolayIK.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KolayIK.Data.Migrations
{
    [DbContext(typeof(KolayIKDBContext))]
    partial class KolayIKDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KolayIK.Core.Modal.AddressInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryID")
                        .HasColumnType("int");

                    b.Property<int?>("CountyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CountyID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("AddressInfos");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Certificate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ResumeID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3877),
                            CityName = "Adana",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3878),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3882),
                            CityName = "Adıyaman",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3883),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3887),
                            CityName = "Afyonkarahisar",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3888),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3891),
                            CityName = "Ağrı",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3892),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3895),
                            CityName = "Amasya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3896),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3899),
                            CityName = "Ankara",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3900),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3903),
                            CityName = "Antalya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3904),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3948),
                            CityName = "Artvin",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3949),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3952),
                            CityName = "Aydın",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3953),
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3956),
                            CityName = "Balıkesir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3957),
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3960),
                            CityName = "Bilecik",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3961),
                            Status = true
                        },
                        new
                        {
                            ID = 12,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3964),
                            CityName = "Bingöl",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3965),
                            Status = true
                        },
                        new
                        {
                            ID = 13,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3968),
                            CityName = "Bitlis",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3968),
                            Status = true
                        },
                        new
                        {
                            ID = 14,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3971),
                            CityName = "Bolu",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3972),
                            Status = true
                        },
                        new
                        {
                            ID = 15,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3975),
                            CityName = "Burdur",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3976),
                            Status = true
                        },
                        new
                        {
                            ID = 16,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3979),
                            CityName = "Bursa",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3980),
                            Status = true
                        },
                        new
                        {
                            ID = 17,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3983),
                            CityName = "Çanakkale",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3984),
                            Status = true
                        },
                        new
                        {
                            ID = 18,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3987),
                            CityName = "Çankırı",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3988),
                            Status = true
                        },
                        new
                        {
                            ID = 19,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3990),
                            CityName = "Çorum",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3991),
                            Status = true
                        },
                        new
                        {
                            ID = 20,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3994),
                            CityName = "Denizli",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3995),
                            Status = true
                        },
                        new
                        {
                            ID = 21,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3998),
                            CityName = "Diyarbakır",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(3999),
                            Status = true
                        },
                        new
                        {
                            ID = 22,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4002),
                            CityName = "Edirne",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4002),
                            Status = true
                        },
                        new
                        {
                            ID = 23,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4005),
                            CityName = "Elazığ",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4006),
                            Status = true
                        },
                        new
                        {
                            ID = 24,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4009),
                            CityName = "Erzincan",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4010),
                            Status = true
                        },
                        new
                        {
                            ID = 25,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4013),
                            CityName = "Erzurum",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4013),
                            Status = true
                        },
                        new
                        {
                            ID = 26,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4016),
                            CityName = "Eskişehir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4017),
                            Status = true
                        },
                        new
                        {
                            ID = 27,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4087),
                            CityName = "Gaziantep",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4088),
                            Status = true
                        },
                        new
                        {
                            ID = 28,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4091),
                            CityName = "Giresun",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4092),
                            Status = true
                        },
                        new
                        {
                            ID = 29,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4095),
                            CityName = "Gümüşhane",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4096),
                            Status = true
                        },
                        new
                        {
                            ID = 30,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4099),
                            CityName = "Hakkâri",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4099),
                            Status = true
                        },
                        new
                        {
                            ID = 31,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4102),
                            CityName = "Hatay",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4103),
                            Status = true
                        },
                        new
                        {
                            ID = 32,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4106),
                            CityName = "Isparta",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4106),
                            Status = true
                        },
                        new
                        {
                            ID = 33,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4109),
                            CityName = "Mersin",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4110),
                            Status = true
                        },
                        new
                        {
                            ID = 34,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4113),
                            CityName = "İstanbul",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4114),
                            Status = true
                        },
                        new
                        {
                            ID = 35,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4117),
                            CityName = "İzmir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4117),
                            Status = true
                        },
                        new
                        {
                            ID = 36,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4120),
                            CityName = "Kars",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4121),
                            Status = true
                        },
                        new
                        {
                            ID = 37,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4124),
                            CityName = "Kastamonu",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4125),
                            Status = true
                        },
                        new
                        {
                            ID = 38,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4128),
                            CityName = "Kayseri",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4128),
                            Status = true
                        },
                        new
                        {
                            ID = 39,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4131),
                            CityName = "Kırklareli",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4132),
                            Status = true
                        },
                        new
                        {
                            ID = 40,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4135),
                            CityName = "Kırşehir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4136),
                            Status = true
                        },
                        new
                        {
                            ID = 41,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4138),
                            CityName = "Kocaeli",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4139),
                            Status = true
                        },
                        new
                        {
                            ID = 42,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4142),
                            CityName = "Konya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4143),
                            Status = true
                        },
                        new
                        {
                            ID = 43,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4146),
                            CityName = "Kütahya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4146),
                            Status = true
                        },
                        new
                        {
                            ID = 44,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4149),
                            CityName = "Malatya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4150),
                            Status = true
                        },
                        new
                        {
                            ID = 45,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4153),
                            CityName = "Manisa",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4154),
                            Status = true
                        },
                        new
                        {
                            ID = 46,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4156),
                            CityName = "Kahramanmaraş",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4157),
                            Status = true
                        },
                        new
                        {
                            ID = 47,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4160),
                            CityName = "Mardin",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4161),
                            Status = true
                        },
                        new
                        {
                            ID = 48,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4164),
                            CityName = "Muğla",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4165),
                            Status = true
                        },
                        new
                        {
                            ID = 49,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4168),
                            CityName = "Muş",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4168),
                            Status = true
                        },
                        new
                        {
                            ID = 50,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4171),
                            CityName = "Nevşehir",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4172),
                            Status = true
                        },
                        new
                        {
                            ID = 51,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4175),
                            CityName = "Niğde",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4176),
                            Status = true
                        },
                        new
                        {
                            ID = 52,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4178),
                            CityName = "Ordu",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4179),
                            Status = true
                        },
                        new
                        {
                            ID = 53,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4182),
                            CityName = "Rize",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4183),
                            Status = true
                        },
                        new
                        {
                            ID = 54,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4186),
                            CityName = "Sakarya",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4186),
                            Status = true
                        },
                        new
                        {
                            ID = 55,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4189),
                            CityName = "Samsun",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4190),
                            Status = true
                        },
                        new
                        {
                            ID = 56,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4193),
                            CityName = "Siirt",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4194),
                            Status = true
                        },
                        new
                        {
                            ID = 57,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4196),
                            CityName = "Sinop",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4197),
                            Status = true
                        },
                        new
                        {
                            ID = 58,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4200),
                            CityName = "Sivas",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4201),
                            Status = true
                        },
                        new
                        {
                            ID = 59,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4204),
                            CityName = "Tekirdağ",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4205),
                            Status = true
                        },
                        new
                        {
                            ID = 60,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4208),
                            CityName = "Tokat",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4209),
                            Status = true
                        },
                        new
                        {
                            ID = 61,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4212),
                            CityName = "Trabzon",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4212),
                            Status = true
                        },
                        new
                        {
                            ID = 62,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4215),
                            CityName = "Tunceli",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4216),
                            Status = true
                        },
                        new
                        {
                            ID = 63,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4219),
                            CityName = "Şanlıurfa",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4220),
                            Status = true
                        },
                        new
                        {
                            ID = 64,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4223),
                            CityName = "Uşak",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4224),
                            Status = true
                        },
                        new
                        {
                            ID = 65,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4227),
                            CityName = "Van",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4227),
                            Status = true
                        },
                        new
                        {
                            ID = 66,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4230),
                            CityName = "Yozgat",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4231),
                            Status = true
                        },
                        new
                        {
                            ID = 67,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4234),
                            CityName = "Zonguldak",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4235),
                            Status = true
                        },
                        new
                        {
                            ID = 68,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4237),
                            CityName = "Aksaray",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4238),
                            Status = true
                        },
                        new
                        {
                            ID = 69,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4241),
                            CityName = "Bayburt",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4242),
                            Status = true
                        },
                        new
                        {
                            ID = 70,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4245),
                            CityName = "Karaman",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4246),
                            Status = true
                        },
                        new
                        {
                            ID = 71,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4249),
                            CityName = "Kırıkkale",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4249),
                            Status = true
                        },
                        new
                        {
                            ID = 72,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4252),
                            CityName = "Batman",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4253),
                            Status = true
                        },
                        new
                        {
                            ID = 73,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4256),
                            CityName = "Şırnak",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4257),
                            Status = true
                        },
                        new
                        {
                            ID = 74,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4259),
                            CityName = "Bartın",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4260),
                            Status = true
                        },
                        new
                        {
                            ID = 75,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4263),
                            CityName = "Ardahan",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4264),
                            Status = true
                        },
                        new
                        {
                            ID = 76,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4267),
                            CityName = "Iğdır",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4267),
                            Status = true
                        },
                        new
                        {
                            ID = 77,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4270),
                            CityName = "Yalova",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4271),
                            Status = true
                        },
                        new
                        {
                            ID = 78,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4274),
                            CityName = "Karabük",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4275),
                            Status = true
                        },
                        new
                        {
                            ID = 79,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4277),
                            CityName = "Kilis",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4278),
                            Status = true
                        },
                        new
                        {
                            ID = 80,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4281),
                            CityName = "Osmaniye",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4282),
                            Status = true
                        },
                        new
                        {
                            ID = 81,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4285),
                            CityName = "Düzce",
                            CountryID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4285),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApprovalStatusID")
                        .HasColumnType("int");

                    b.Property<int>("ApproverID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ApprovalStatusID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6328),
                            CountryName = "Türkiye",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6329),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6332),
                            CountryName = "Almanya",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6333),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6337),
                            CountryName = "Fransa",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6337),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6341),
                            CountryName = "İngiltere",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6341),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6344),
                            CountryName = "İtalya",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6345),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6348),
                            CountryName = "İspanya",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6349),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6352),
                            CountryName = "Türkiye",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6353),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6356),
                            CountryName = "Ukrayna",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6357),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6360),
                            CountryName = "Polonya",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6360),
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6363),
                            CountryName = "Romanya",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6364),
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6367),
                            CountryName = "Hollanda",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6368),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.County", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("CountyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Counties");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4661),
                            CityID = 1,
                            CountyName = "Kağıthane",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4662),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4667),
                            CityID = 1,
                            CountyName = "Şişli",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4667),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4671),
                            CityID = 1,
                            CountyName = "Beşiktaş",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4672),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4675),
                            CityID = 1,
                            CountyName = "Beyoğlu",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4676),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4679),
                            CityID = 1,
                            CountyName = "Kadıköy",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4680),
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4683),
                            CityID = 1,
                            CountyName = "Üsküdar",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4684),
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4687),
                            CityID = 1,
                            CountyName = "Fatih",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4688),
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4691),
                            CityID = 1,
                            CountyName = "Bakırköy",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4692),
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4694),
                            CityID = 1,
                            CountyName = "Maltepe",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4695),
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4698),
                            CityID = 1,
                            CountyName = "Ataşehir",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4699),
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4702),
                            CityID = 1,
                            CountyName = "Büyükçekmece",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4703),
                            Status = true
                        },
                        new
                        {
                            ID = 12,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4706),
                            CityID = 1,
                            CountyName = "Sarıyer",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4707),
                            Status = true
                        },
                        new
                        {
                            ID = 13,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4710),
                            CityID = 1,
                            CountyName = "Kartal",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4711),
                            Status = true
                        },
                        new
                        {
                            ID = 14,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4714),
                            CityID = 1,
                            CountyName = "Şile",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4715),
                            Status = true
                        },
                        new
                        {
                            ID = 15,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4718),
                            CityID = 1,
                            CountyName = "Çatalca",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4718),
                            Status = true
                        },
                        new
                        {
                            ID = 16,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4721),
                            CityID = 1,
                            CountyName = "Adalar",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4722),
                            Status = true
                        },
                        new
                        {
                            ID = 17,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4725),
                            CityID = 2,
                            CountyName = "Altındağ",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(4726),
                            Status = true
                        },
                        new
                        {
                            ID = 18,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6078),
                            CityID = 2,
                            CountyName = "Ayaş",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6078),
                            Status = true
                        },
                        new
                        {
                            ID = 19,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6083),
                            CityID = 2,
                            CountyName = "Bala",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6084),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Education", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResumeID")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("ResumeID");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.EmergencyPerson", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("EmergencyPersons");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("EventTypeID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6550),
                            EventName = "Yılbaşı Günü",
                            EventTypeID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6550),
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6555),
                            EventName = "23 Nisan Ulusal Egemenlik ve Çocuk Bayramı",
                            EventTypeID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6556),
                            StartDate = new DateTime(2025, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6559),
                            EventName = "1 Mayıs – Emek ve Dayanışma Günü",
                            EventTypeID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6560),
                            StartDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6563),
                            EventName = "30 Ağustos – Zafer Bayramı",
                            EventTypeID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6564),
                            StartDate = new DateTime(2025, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6567),
                            EventName = "29 Ekim – Cumhuriyet Bayramı",
                            EventTypeID = 1,
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6568),
                            StartDate = new DateTime(2025, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.EventType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6717),
                            EventTypeName = "Resmi Tatil",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6718),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6721),
                            EventTypeName = "Dini Bayram",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6722),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.ExpenseRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApproverID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("StateID");

                    b.HasIndex("UserID");

                    b.ToTable("ExpenseRequests");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Experience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<int>("ResumeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("PositionID");

                    b.HasIndex("ResumeID");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6993),
                            GenderName = "Kadın",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6994),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6997),
                            GenderName = "Erkek",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(6998),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Idendity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Idendity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddressInfoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmergencyPersonID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.Property<double>("RemainingLeave")
                        .HasColumnType("float");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("GenderID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KolayIK.Core.Modal.LeaveRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ApproverID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("TotalTime")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApproverID");

                    b.HasIndex("LeaveTypeID");

                    b.HasIndex("StateID");

                    b.HasIndex("UserID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.LeaveType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7151),
                            LeaveTypeName = "Mazeretsiz İzin",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7152),
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7155),
                            LeaveTypeName = "Yıllık İzin",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7156),
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7159),
                            LeaveTypeName = "Doğum İzni",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7160),
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7163),
                            LeaveTypeName = "Rapor",
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7163),
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7304),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7305),
                            PositionName = "CEO",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7308),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7309),
                            PositionName = "COO",
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7312),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7313),
                            PositionName = "CFO",
                            Status = true
                        },
                        new
                        {
                            ID = 4,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7316),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7317),
                            PositionName = "CTO",
                            Status = true
                        },
                        new
                        {
                            ID = 5,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7320),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7321),
                            PositionName = "CMO",
                            Status = true
                        },
                        new
                        {
                            ID = 6,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7324),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7324),
                            PositionName = "Genel Müdür",
                            Status = true
                        },
                        new
                        {
                            ID = 7,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7327),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7328),
                            PositionName = "Bölüm Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 8,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7331),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7332),
                            PositionName = "İdari Asistan",
                            Status = true
                        },
                        new
                        {
                            ID = 9,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7335),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7336),
                            PositionName = "Ofis Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 10,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7338),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7339),
                            PositionName = "Sekreter",
                            Status = true
                        },
                        new
                        {
                            ID = 11,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7342),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7343),
                            PositionName = "Muhasebeci",
                            Status = true
                        },
                        new
                        {
                            ID = 12,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7346),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7346),
                            PositionName = "Finansal Analist",
                            Status = true
                        },
                        new
                        {
                            ID = 13,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7349),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7350),
                            PositionName = "Mali Müşavir",
                            Status = true
                        },
                        new
                        {
                            ID = 14,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7353),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7354),
                            PositionName = "İç Denetçi",
                            Status = true
                        },
                        new
                        {
                            ID = 15,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7356),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7357),
                            PositionName = "Vergi Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 16,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7360),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7361),
                            PositionName = "İnsan Kaynakları Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 17,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7364),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7365),
                            PositionName = "İK Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 18,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7367),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7368),
                            PositionName = "Eğitim ve Gelişim Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 19,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7371),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7372),
                            PositionName = "İşe Alım Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 20,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7375),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7375),
                            PositionName = "Pazarlama Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 21,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7378),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7379),
                            PositionName = "Satış Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 22,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7382),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7383),
                            PositionName = "Dijital Pazarlama Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 23,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7385),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7386),
                            PositionName = "Satış Temsilcisi",
                            Status = true
                        },
                        new
                        {
                            ID = 24,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7389),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7390),
                            PositionName = "Müşteri İlişkileri Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 25,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7393),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7394),
                            PositionName = "Üretim Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 26,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7397),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7398),
                            PositionName = "Operasyon Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 27,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7400),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7401),
                            PositionName = "Kalite Kontrol Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 28,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7404),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7405),
                            PositionName = "Üretim Elemanı",
                            Status = true
                        },
                        new
                        {
                            ID = 29,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7408),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7409),
                            PositionName = "Yazılım Geliştirici",
                            Status = true
                        },
                        new
                        {
                            ID = 30,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7411),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7412),
                            PositionName = "Sistem Analisti",
                            Status = true
                        },
                        new
                        {
                            ID = 31,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7415),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7415),
                            PositionName = "Veri Tabanı Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 32,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7418),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7419),
                            PositionName = "IT Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 33,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7422),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7423),
                            PositionName = "Teknik Destek Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 34,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7425),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7426),
                            PositionName = "Ar-Ge Müdürü",
                            Status = true
                        },
                        new
                        {
                            ID = 35,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7429),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7430),
                            PositionName = "Ürün Geliştirme Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 36,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7432),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7433),
                            PositionName = "Proje Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 37,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7436),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7437),
                            PositionName = "Hukuk Müşaviri",
                            Status = true
                        },
                        new
                        {
                            ID = 38,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7440),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7441),
                            PositionName = "Uyum Uzmanı",
                            Status = true
                        },
                        new
                        {
                            ID = 39,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7443),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7444),
                            PositionName = "Sözleşme Yöneticisi",
                            Status = true
                        },
                        new
                        {
                            ID = 40,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7447),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7448),
                            PositionName = "Müşteri Hizmetleri Temsilcisi",
                            Status = true
                        },
                        new
                        {
                            ID = 41,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7451),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(7451),
                            PositionName = "Teknik Destek Uzmanı",
                            Status = true
                        });
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Resume", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9091),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9092),
                            StateName = "Onay Bekliyor",
                            Status = true
                        },
                        new
                        {
                            ID = 2,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9096),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9096),
                            StateName = "Onaylandı",
                            Status = true
                        },
                        new
                        {
                            ID = 3,
                            AddedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9100),
                            ModifiedDate = new DateTime(2024, 8, 31, 3, 5, 33, 302, DateTimeKind.Local).AddTicks(9100),
                            StateName = "Reddedildi",
                            Status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KolayIK.Core.Modal.AddressInfo", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.City", "City")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CityID");

                    b.HasOne("KolayIK.Core.Modal.Country", "Country")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CountryID");

                    b.HasOne("KolayIK.Core.Modal.County", "County")
                        .WithMany("AddressInfo")
                        .HasForeignKey("CountyID");

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "User")
                        .WithOne("AddressInfo")
                        .HasForeignKey("KolayIK.Core.Modal.AddressInfo", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("County");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Certificate", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Resume", "Resume")
                        .WithMany("Certificates")
                        .HasForeignKey("ResumeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.City", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Company", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.State", "ApprovalStatus")
                        .WithMany("Companies")
                        .HasForeignKey("ApprovalStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "Approver")
                        .WithMany("ApprovedCompanies")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "Manager")
                        .WithMany("ManagedCompanies")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Approver");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.County", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.City", "City")
                        .WithMany("County")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Education", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.EmergencyPerson", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "Employee")
                        .WithOne("EmergencyPerson")
                        .HasForeignKey("KolayIK.Core.Modal.EmergencyPerson", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Event", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Company", "Company")
                        .WithMany("Events")
                        .HasForeignKey("CompanyID");

                    b.HasOne("KolayIK.Core.Modal.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.ExpenseRequest", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "Approver")
                        .WithMany("ApprovedExpenseReq")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.State", "State")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "User")
                        .WithMany("ExpenseRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Experience", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Position", "Position")
                        .WithMany("Experiences")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Resume", "Resume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Idendity.AppUser", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KolayIK.Core.Modal.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Gender");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.LeaveRequest", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "Approver")
                        .WithMany("ApprovedLeaveReq")
                        .HasForeignKey("ApproverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.LeaveType", "LeaveType")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("LeaveTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.State", "State")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "User")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("LeaveType");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Resume", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", "User")
                        .WithOne("Resume")
                        .HasForeignKey("KolayIK.Core.Modal.Resume", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KolayIK.Core.Modal.Idendity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KolayIK.Core.Modal.City", b =>
                {
                    b.Navigation("AddressInfo");

                    b.Navigation("County");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Country", b =>
                {
                    b.Navigation("AddressInfo");

                    b.Navigation("City");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.County", b =>
                {
                    b.Navigation("AddressInfo");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Idendity.AppUser", b =>
                {
                    b.Navigation("AddressInfo")
                        .IsRequired();

                    b.Navigation("ApprovedCompanies");

                    b.Navigation("ApprovedExpenseReq");

                    b.Navigation("ApprovedLeaveReq");

                    b.Navigation("EmergencyPerson")
                        .IsRequired();

                    b.Navigation("ExpenseRequests");

                    b.Navigation("LeaveRequests");

                    b.Navigation("ManagedCompanies");

                    b.Navigation("Resume")
                        .IsRequired();
                });

            modelBuilder.Entity("KolayIK.Core.Modal.LeaveType", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Position", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.Resume", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Educations");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("KolayIK.Core.Modal.State", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("ExpenseRequests");

                    b.Navigation("LeaveRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
